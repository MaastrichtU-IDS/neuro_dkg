# -*- coding: utf-8 -*-
"""Copy_Convert_NeuroDKG.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1la848FqlwvvxMyW_zvNVfC5MkCFhS1n6
"""


# import for RDF knowledge
from rdflib import Graph, URIRef, Literal, RDF, ConjunctiveGraph
from rdflib import Namespace
from rdflib import Dataset

# import relevant libraries to be used for analysis
import pandas as pd
import os
import re


import pandas as pd
from io import BytesIO

# define predicates using uri
predicate_to_uri = {'is_a': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
                    'type': 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',
                    'drug': 'http://www.w3id.org/neurodkg:drug',
                    'disease': 'http://www.w3id.org/neurodkg:disease',
                    'targetGroup': 'http://www.w3id.org/neurodkg:targetGroup',
                    'hasTreatment': 'http://www.w3id.org/neurodkg:hasTreatment',
                    'hasSymptom': 'http://www.w3id.org/neurodkg:hasSymptom',
                    'hasComorbidity': 'http://www.w3id.org/neurodkg:hasComorbidity',
                    'hasCurrentMedication': 'http://www.w3id.org/neurodkg:hasCurrentMedication',
                    'hasMinAge': 'http://www.w3id.org/neurodkg:hasMinAge',
                    'hasAgeGroup': 'http://www.w3id.org/neurodkg:hasAgeGroup',
                    'treatmentDuration': 'http://www.w3id.org/neurodkg:treatmentDuration',
                    'drugTreatment': 'http://www.w3id.org/neurodkg:drugTreatment',
                    'responseStatus': 'http://www.w3id.org/neurodkg:responseStatus',
                    'hasTherapy': 'http://www.w3id.org/neurodkg:hasTherapy',
                    'contains': 'http://www.w3id.org/neurodkg:contains'}

# define objects using uri
object_to_uri = {'DrugDiseaseTargetGroup': 'http://www.w3id.org/neurodkg:DrugDiseaseTargetGroup',
                 'symptomatic_relief': 'http://www.w3id.org/neurodkg:SymptomaticRelief',
                 'indication': 'http://www.w3id.org/neurodkg:Indication',
                 'prevention': 'http://www.w3id.org/neurodkg:Prevention'}

# define namespace
graphID = 'SemanticTypes_2018AB'
UMLS = Namespace("http://www.w3id.org/umls/")
NEURO_INST = Namespace("http://www.w3id.org/neurodkg/Instances/")
RDFS = Namespace("http://www.w3.org/2000/01/rdf-schema#")
RDF = Namespace("http://www.w3.org/1999/02/22-rdf-syntax-ns#")
BASE = Namespace("http://www.w3id.org/")
SKOS = Namespace("http://www.w3.org/2004/02/skos/core#")

prefix_dict = {'doid': 'http://www.w3id.org/doid/',
               'umls': 'http://bioportal.bioontology.org/ontologies/umls/',
               'dbid': 'http://www.w3id.org/drugbank:',
               'ncit': 'http://ncicb.nci.nih.gov/xml/owl/EVS/Thesaurus.owl#',
               'meddra': 'http://purl.bioontology.org/ontology/MEDDRA/',
               'ochv': 'http://sbmi.uth.tmc.edu/ontology/ochv#',
               'iobc': 'http://purl.jp/bio/4/id/',
               'ddo': 'http://purl.obolibrary.org/obo/DDO.owl#',
               'snomedct': 'http://purl.bioontology.org/ontology/SNOMEDCT/',
               'ogms': 'http://purl.obolibrary.org/obo/OGMS_',
               'hp': 'http://purl.obolibrary.org/obo/HP_',
               'symp': 'http://purl.obolibrary.org/obo/SYMP_',
               'mondo': 'http://purl.obolibrary.org/obo/MONDO_',
               'mfomd': 'http://purl.obolibrary.org/obo/MFOMD_',
               'omim': 'http://purl.bioontology.org/ontology/OMIM/',
               'chebi': 'http://purl.obolibrary.org/obo/CHEBI_',
               'ontoad': 'http://purl.obolibrary.org/obo/OntoAD#',
               'efo': 'http://www.ebi.ac.uk/efo/EFO_',
               'icpc2p': 'http://purl.bioontology.org/ontology/ICPC2P/'}


if __name__ == '__main__':
    df = pd.read_excel('data/neurodkg_triples.xlsx', sheet_name='Clean')
    dataset = Dataset()
    for index, row in df.iterrows():
        subj = row['Subject'].replace(' ', '')
        pred = row['Predicate']
        obj = row['Object']
        obj_id = row['Concept ID']
        # if the predicate is targetGroup: remove the characters (\ |\>|\<|\-|\_|\;|\:) from the object names
        if pred == 'targetGroup':
            obj = re.sub('\ |\>|\<|\-|\_|\;|\:', '', obj)
            # create triples containing subject (neurodkg instances), predicate (several are defined above), and object (neurodkg instances) and add them to the dataset
            dataset.add((NEURO_INST[subj], URIRef(
                predicate_to_uri[pred]), NEURO_INST[obj]))
        # object id: differentiating between the cases of having a disease ID or not
        elif str(obj_id) != 'nan':
            print(obj_id)
            curie = obj_id.replace(' ', '').split(':')
            if len(curie) <= 1:
                print(obj_id)
            prefix = curie[0].lower()
            obj_id = curie[1]
            print(curie)
            # if a disease ID was found, then add the ID and ontology as object of the triple
            #obj_uri  = BASE[prefix+':'+obj_id]
            obj_uri = URIRef(prefix_dict[prefix]+obj_id)
            dataset.add((NEURO_INST[subj], URIRef(
                predicate_to_uri[pred]), obj_uri))
            # if there was no disease ID in an ontology: use the disease label as object of the triple
            dataset.add((obj_uri, RDFS['label'], Literal(obj)))
        else:
            if obj in object_to_uri:
                obj_uri = object_to_uri[obj]
                dataset.add((NEURO_INST[subj], URIRef(
                    predicate_to_uri[pred]), URIRef(obj_uri)))
            else:
                dataset.add((NEURO_INST[subj], URIRef(
                    predicate_to_uri[pred]), Literal(obj)))
        print("---------", index)
    # saving the dataset as a turtle file
    dataset.serialize('data/output/neuro_dkg.ttl', format='turtle')
